// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL") // Change this over to DATABASE_URL if you want to deploy to docker
  directUrl = env("DATABASE_URL")
}

//------------------------
// Necessary for Next auth
//------------------------
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  worlds        World[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//------------------------
// Chronistic objects
//------------------------
model World {
  id        String   @id @default(cuid())
  name      String
  map       Map[]
  user      User     @relation(fields: [userId], references: [id]) // TODO: remove optionality
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Map {
  id         String      @id @default(cuid())
  name       String
  filePath   String
  world      World       @relation(fields: [worldId], references: [id])
  worldId    String
  positions  Position[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Construct {
  id          String   @id @default(cuid())
  name        String
  description String
  positions   Position[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Because Prisma does not support the interval type, all of the prisma generated stuff doesn't work
// So instead we use dbgenerated to get the default values
model Position {
  id                    String   @id @default(dbgenerated("gen_random_uuid()"))
  map                   Map      @relation(fields: [mapId], references: [id])
  mapId                 String
  construct             Construct @relation(fields: [constructId], references: [id])
  constructId           String
  posX                  Int
  posY                  Int
  intervalFromBeginning Unsupported("interval") @default(dbgenerated("'0 seconds'::interval"))
  createdAt             DateTime @default(dbgenerated("now()"))
  updatedAt             DateTime @default(dbgenerated("now()"))

  @@unique([mapId, constructId, intervalFromBeginning])  
}
